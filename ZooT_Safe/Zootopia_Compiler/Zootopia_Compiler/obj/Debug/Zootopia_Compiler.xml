<?xml version="1.0"?>
<doc>
<assembly>
<name>
Zootopia_Compiler
</name>
</assembly>
<members>
<member name="T:Zootopia_Compiler.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Zootopia_Compiler.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Zootopia_Compiler.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Zootopia_Compiler.My.Resources.Resources.analyze">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Zootopia_Compiler.My.Resources.Resources.analyzer">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Zootopia_Compiler.My.Resources.Resources.lexi">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Zootopia_Compiler.My.Resources.Resources.lexical">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Zootopia_Compiler.My.Resources.Resources.Zoo_whale">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="T:Zootopia_Compiler.SyntaxAnalyzer">
<remarks>A class providing callback methods for the
parser.</remarks>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.Enter(PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.Exit(PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.Child(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterEntrance(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitEntrance(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterExit(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitExit(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterMane(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitMane(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterLet(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitLet(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterWipe(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitWipe(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterZooin(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitZooin(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterZoout(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitZoout(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterIf(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitIf(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterEelsif(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitEelsif(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterEels(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitEels(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterChamois(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitChamois(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterTermite(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitTermite(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterSeal(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitSeal(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterWhale(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitWhale(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterDo(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitDo(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterFur(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitFur(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterHop(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitHop(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterSwasp(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitSwasp(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterStork(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitStork(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterAt(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitAt(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterComsym(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitComsym(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterTermi(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitTermi(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterSc(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitSc(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterComma(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitComma(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterEqual(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitEqual(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterOb(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitOb(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterCb(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitCb(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterOc(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitOc(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterCc(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitCc(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterOp(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitOp(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterCp(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitCp(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterOdc(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitOdc(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterCdc(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitCdc(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterConc(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitConc(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterCon(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitCon(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterOdp(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitOdp(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterCdp(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitCdp(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterNeg(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitNeg(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterAdd(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitAdd(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterSub(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitSub(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterMul(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitMul(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterDiv(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitDiv(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterMod(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitMod(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterExp(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitExp(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterOa(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitOa(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterCa(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitCa(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterOae(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitOae(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterCae(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitCae(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterEe(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitEe(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterDe(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitDe(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterExc(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitExc(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterDand(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitDand(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterDor(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitDor(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterIncre(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitIncre(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterDecre(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitDecre(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterAnd(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitAnd(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterOr(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitOr(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterQm(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitQm(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterNewt(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitNewt(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterDuck(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitDuck(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterBull(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitBull(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterStarling(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitStarling(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterViper(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitViper(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterNewtlit(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitNewtlit(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterDucklit(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitDucklit(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterStarlit(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitStarlit(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterTrue(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitTrue(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterFalse(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitFalse(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterId(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitId(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterComment(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitComment(PerCederberg.Grammatica.Runtime.Token)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterProgram(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitProgram(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildProgram(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterProdComment(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitProdComment(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildProdComment(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterGlobalDec(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitGlobalDec(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildGlobalDec(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterGlobalFuncdec(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitGlobalFuncdec(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildGlobalFuncdec(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterVarDec(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitVarDec(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildVarDec(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterIdentVar(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitIdentVar(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildIdentVar(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterDtype(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitDtype(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildDtype(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterNext2Var(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitNext2Var(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildNext2Var(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterNext2varTail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitNext2varTail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildNext2varTail(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterVal(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitVal(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildVal(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterBulLit(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitBulLit(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildBulLit(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterArray1d(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitArray1d(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildArray1d(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterElem1dNext(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitElem1dNext(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildElem1dNext(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterElem1dList(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitElem1dList(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildElem1dList(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterElemlist1dTail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitElemlist1dTail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildElemlist1dTail(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterArray2d(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitArray2d(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildArray2d(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterElem2dNext(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitElem2dNext(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildElem2dNext(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterElem2dList(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitElem2dList(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildElem2dList(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterSize(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitSize(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildSize(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterConstDec(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitConstDec(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildConstDec(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterConstNext(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitConstNext(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildConstNext(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterFuncDec(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitFuncDec(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildFuncDec(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterDtype1(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitDtype1(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildDtype1(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterParam(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitParam(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildParam(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterMultiParam(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitMultiParam(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildMultiParam(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterStorkDec(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitStorkDec(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildStorkDec(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterStorkElem(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitStorkElem(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildStorkElem(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterMultiVardec(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitMultiVardec(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildMultiVardec(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterMultistorkElem(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitMultistorkElem(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildMultistorkElem(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterObjDec(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitObjDec(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildObjDec(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterProdMane(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitProdMane(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildProdMane(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterLocalDec(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitLocalDec(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildLocalDec(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterStatement(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitStatement(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildStatement(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterClrscr(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitClrscr(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildClrscr(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterStatement1(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitStatement1(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildStatement1(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterStatementTail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitStatementTail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildStatementTail(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterInput(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitInput(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildInput(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterScanFig(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitScanFig(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildScanFig(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterMultiInput(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitMultiInput(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildMultiInput(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterArr1d(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitArr1d(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildArr1d(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterArr2d(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitArr2d(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildArr2d(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterStorkAccess1(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitStorkAccess1(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildStorkAccess1(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterOutput(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitOutput(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildOutput(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterOutputNext(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitOutputNext(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildOutputNext(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterMultiOutput(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitMultiOutput(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildMultiOutput(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterScanFig1(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitScanFig1(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildScanFig1(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterMathEq(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitMathEq(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildMathEq(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterMathEqtail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitMathEqtail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildMathEqtail(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterMathTail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitMathTail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildMathTail(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterMathOp(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitMathOp(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildMathOp(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterMathId(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitMathId(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildMathId(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterNegate(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitNegate(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildNegate(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterMatheqNext(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitMatheqNext(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildMatheqNext(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterConditional(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitConditional(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildConditional(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterCondExpr(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitCondExpr(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildCondExpr(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterRelExpr1(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitRelExpr1(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildRelExpr1(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterRelexTail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitRelexTail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildRelexTail(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterArithmetic(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitArithmetic(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildArithmetic(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterArithmeticTail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitArithmeticTail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildArithmeticTail(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterExpression(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitExpression(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterExprNext(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitExprNext(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildExprNext(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterRelOp1(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitRelOp1(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildRelOp1(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterRelOp2(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitRelOp2(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildRelOp2(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterRelFig(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitRelFig(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildRelFig(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterLogExpr(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitLogExpr(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildLogExpr(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterNotFig(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitNotFig(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildNotFig(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterLogExprNext(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitLogExprNext(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildLogExprNext(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterLogOp(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitLogOp(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildLogOp(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterCondEelsif(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitCondEelsif(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildCondEelsif(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterCondEels(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitCondEels(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildCondEels(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterSwaspCase(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitSwaspCase(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildSwaspCase(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterSwaspCase1(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitSwaspCase1(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildSwaspCase1(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterTermExpr(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitTermExpr(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildTermExpr(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterDefault(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitDefault(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildDefault(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterIterative(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitIterative(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildIterative(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterLoopFig1(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitLoopFig1(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildLoopFig1(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterLoopFig2(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitLoopFig2(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildLoopFig2(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterIncremDecrem(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitIncremDecrem(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildIncremDecrem(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterUnaryOp(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitUnaryOp(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildUnaryOp(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterFunctionCall(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitFunctionCall(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildFunctionCall(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterArgs1(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitArgs1(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildArgs1(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterArgs2(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitArgs2(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildArgs2(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterArgsTail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitArgsTail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildArgsTail(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterMultiArgs(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitMultiArgs(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildMultiArgs(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterSubFunction(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitSubFunction(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildSubFunction(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterFuncArgs(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitFuncArgs(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildFuncArgs(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterFuncTail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitFuncTail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildFuncTail(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterOneArray(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitOneArray(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildOneArray(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterTwoArray(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitTwoArray(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildTwoArray(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterMultifuncArgs(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitMultifuncArgs(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildMultifuncArgs(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterReturn(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitReturn(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildReturn(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterResult(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitResult(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildResult(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.EnterResultTail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when entering a parse tree node.</summary>

<param name='node'>the node being entered</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ExitResultTail(PerCederberg.Grammatica.Runtime.Production)">
<summary>Called when exiting a parse tree node.</summary>

<param name='node'>the node being exited</param>

<returns>the node to add to the parse tree, or
         null if no parse tree should be created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxAnalyzer.ChildResultTail(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
<summary>Called when adding a child to a parse tree
node.</summary>

<param name='node'>the parent node</param>
<param name='child'>the child node, or null</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParseException'>if the node analysis
discovered errors</exception>
</member>
<member name="T:Zootopia_Compiler.SyntaxConstants">
<remarks>An enumeration with token and production node
constants.</remarks>
</member>
<member name="T:Zootopia_Compiler.SyntaxParser">
<remarks>A token stream parser.</remarks>
</member>
<member name="M:Zootopia_Compiler.SyntaxParser.#ctor(System.IO.TextReader)">
<summary>Creates a new parser with a default analyzer.</summary>

<param name='input'>the input stream to read from</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParserCreationException'>if the parser
couldn't be initialized correctly</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxParser.#ctor(System.IO.TextReader,Zootopia_Compiler.SyntaxAnalyzer)">
<summary>Creates a new parser.</summary>

<param name='input'>the input stream to read from</param>

<param name='analyzer'>the analyzer to parse with</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParserCreationException'>if the parser
couldn't be initialized correctly</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxParser.NewTokenizer(System.IO.TextReader)">
<summary>Creates a new tokenizer for this parser. Can be overridden
by a subclass to provide a custom implementation.</summary>

<param name='input'>the input stream to read from</param>

<returns>the tokenizer created</returns>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParserCreationException'>if the tokenizer
couldn't be initialized correctly</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxParser.CreatePatterns">
<summary>Initializes the parser by creating all the production
patterns.</summary>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParserCreationException'>if the parser
couldn't be initialized correctly</exception>
</member>
<member name="T:Zootopia_Compiler.SyntaxTokenizer">
<remarks>A character stream tokenizer.</remarks>
</member>
<member name="M:Zootopia_Compiler.SyntaxTokenizer.#ctor(System.IO.TextReader)">
<summary>Creates a new tokenizer for the specified input
stream.</summary>

<param name='input'>the input stream to read</param>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParserCreationException'>if the tokenizer
couldn't be initialized correctly</exception>
</member>
<member name="M:Zootopia_Compiler.SyntaxTokenizer.CreatePatterns">
<summary>Initializes the tokenizer by creating all the token
patterns.</summary>

<exception cref='T:PerCederberg.Grammatica.Runtime.ParserCreationException'>if the tokenizer
couldn't be initialized correctly</exception>
</member>
</members>
</doc>
