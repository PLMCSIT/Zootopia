using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Library
{
    public class PredictSet
    {
        string program = "\"entrance\"";
        string global_choice = "\"newt\", \"duck\", \"bull\", \"starling\", \"viper\", \"mane\", \"let\", \"stork\"";
        string global_dec = "\"newt\", \"duck\", \"bull\", \"starling\", \"viper\", \"mane\", \"let\", \"stork\"";
        string global_funcdec = "\"newt\", \"duck\", \"bull\", \"starling\", \"viper\", \"mane\", \"let\", \"stork\"";
        string var_dec = "\"newt\", \"duck\", \"bull\", \"starling\", \"viper\", \"mane\", \"let\", \"stork\", \"zooin\", \"zoout\", \"if\", \"swasp\", \"whale\", \"do\", \"fur\", \"id\", \"}}\", \"termite\", \"hop\", \":\", \")\", \"{{\"";
        string ident_var = "\"=\", \",\", \"[\", \":\", \")\"";
        string dtype = "\"at\"";
        string next2var = "\"=\", \",\", \"[\"";
        string next2var_tail = "\":\"";
        string val = "\":\", \"}\", \")\"";
        string bulLit = "\":\", \"}\", \")\"";
        string array1D = "\":\", \"[\", \",\"";
        string elem1D_next = "\":\", \"[\", \",\"";
        string elem1D_list = "\"}\"";
        string elemlist1D_tail = "\"}\"";
        string array2D = "\":\"";
        string elem2D_next = "\":\", \"[\",\",\"";
        string elem2D_list = "\"}\"";
        string size = "\"]\"";
        string const_dec = "\"newt\", \"duck\", \"bull\", \"starling\", \"let\", \"stork\", \"viper\", \"mane\"";
        string const_next = "\":\"";
        string func_dec = "\"newt\", \"duck\", \"bull\", \"starling\", \"let\", \"stork\", \"viper\", \"mane\"";
        string dtype1 = "\"at\"";
        string param = "\")\"";
        string multi_param = "\")\"";
        string stork_dec = "\"newt\", \"duck\", \"bull\", \"starling\", \"let\", \"stork\", \"viper\", \"mane\"";
        string stork_elem = "\"newt\", \"duck\", \"starling\", \"bull\", \"}}\"";
        string multi_vardec = "\":\"";
        string multistork_elem = "\"}\"";
        string obj_dec = "\":\"";
        string mane = "\"newt\", \"duck\", \"starling\", \"bull\", \"viper\"";
        string statement_mane = "\"}}\", \"termite\"";
        string local_dec = "\"zooin\", \"zoout\", \"if\", \"swasp\", \"whale\", \"do\", \"fur\", \"id\", \"}}\", \"termite\", \":\", \",\" )";
        string statement = "\"id\"";
        string id_choice = "\"id\", \"zooin\", \"zoout\", \"if\", \"swasp\", \"whale\", \"do\", \"fur\"";
        string string_concat = "\"id\", \"zooin\", \"zoout\", \"if\", \"swasp\", \"whale\", \"do\", \"fur\"";
        string clrscr = "\"id\", \"zooin\", \"zoout\", \"if\", \"swasp\", \"whale\", \"do\", \"fur\"";
        string statement1 = "\"}}\", \":\", \"termite\"";
        string statement_choice = "\"id\", \"zooin\", \"zoout\", \"if\", \"swasp\", \"whale\", \"do\", \"fur\"";
        string statement_tail = "\"id\", \"zooin\", \"zoout\", \"if\", \"swasp\", \"whale\", \"do\", \"fur\"";
        string input = "\"id\", \"zooin\", \"zoout\", \"if\", \"swasp\", \"whale\", \"do\", \"fur\"";
        string scan_fig = "\":\", \"))\"";
        string multi_input = "\":\"";
        string arr1D = "\":\", \")\", \"((\", \"&&\", \"||\"";
        string arr2D = "\":\", \")\", \",\", \"((\", \"&&\", \"||\"";
        string stork_access1 = "\":\", \")\", \",\", \"((\", \"&&\", \"||\"";
        string output = "\"id\", \"zooin\", \"zoout\", \"if\", \"swasp\", \"whale\", \"do\", \"fur\"";
        string output_next = "\":\", \"((\"";
        string multi_output = "\":\"";
        string scan_fig1 = "\":\", \"((\", \")\", \"&&\", \"||\"";
        string math_eqtail = "\"(\", \"?\", \"\"";
        string math_tail = "\"+\", \"-\", \"*\", \"/\", \"^\", \"%\", \":\", \")\", \"((\"";
        string math_eqchoice = "\":\", \"((\"";
        string math_op = "\"id\", \"newt literal\", \"duck literal\", \"~\", \"(\"";
        string math_id = "\"+\", \"-\", \"*\", \"/\", \"^\", \"%\", \":\", \")\", \"((\"";
        string negate = "\"(\", \"newt literal\", \"duck literal\"";
        string matheq_next = "\":\", \"((\", \"+\", \"-\", \"*\", \"/\", \"^\", \"%\", \")\"";
        string conditional = "\"id\", \"zooin\", \"zoout\", \"if\", \"swasp\", \"whale\", \"do\", \"fur\"";
        string cond_expr = "\")\"";
        string cond_expr_choice = "\"||\", \"&&\", \",\"";
        string cond_tail = "\")\"";
        string rel_expr1 = "\")\", \":\", \"&&\", \"||\"";
        string relex_tail = "\")\", \":\", \"&&\", \"||\"";
        string arithmetic = "\")\", \":\", \"&&\", \"||\"";
        string arithmetic_tail = "\")\", \":\", \"&&\", \"||\"";
        string expression = "\")\", \":\", \"&&\", \"||\"";
        string expr_next = "\")\", \":\", \"&&\", \"||\"";
        string rel_op1 = "\"newt literal\", \"duck literal\", \"id\", \"~\", \"(\"";
        string rel_op2 = "\"newt literal\", \"duck literal\", \"starling literal\", \"true\", \"false\", \"[\", \"+\"";
        string rel_fig = "\")\", \":\", \"&&\", \"||\"";
        string log_expr = "\")\"";
        string not_fig = "\")\"";
        string log_expr_next = "\")\"";
        string log_op = "\"(\"";
        string cond_eelsif = "\"id\", \"zooin\", \"zoout\", \"if\", \"swasp\", \"whale\", \"do\", \"fur\", \"eels\"";
        string cond_eels = "\"id\", \"zooin\", \"zoout\", \"if\", \"swasp\", \"whale\", \"do\", \"fur\", \"eels\"";
        string swasp_case = "\"id\", \"zooin\", \"zoout\", \"if\", \"swasp\", \"whale\", \"do\", \"fur\", \"seal\"";
        string swasp_case1 = "\"id\", \"zooin\", \"zoout\", \"if\", \"swasp\", \"whale\", \"do\", \"fur\"";
        string term_expr = "\";\"";
        string defaults = "\"}}\"";
        string iterative = "\"id\", \"zooin\", \"zoout\", \"if\", \"swasp\", \"whale\", \"do\", \"fur\"";
        string loop_fig1 = "\":\"";
        string loop_fig2 = "\":\", \")\"";
        string increm_decrem = "\":\", \")\"";
        string unary_op = "\"id\", \":\", \")\"";
        string function_call = "\"id\", \"zooin\", \"zoout\", \"if\", \"swasp\", \"whale\", \"do\", \"fur\"";
        string args1 = "\")\"";
        string args2 = "\",\" , \")\"";
        string args_tail = "\":\", \")\"";
        string multi_args = "\")\"";
        string sub_function = "\"exit\"";
        string func_args = "\")\"";
        string func_tail = "\"[\"";
        string one_array = "\"[\"";
        string two_array = "\"[\"";
        string multifunc_args = "\")\"";
        string returns = "\"}}\"";
        string result = "\":\"";
        string result_tail = "\":\"";
        string odc = "{{ ";

        public string GetPredictSet(int code)
        {
            switch (code)
            {
                case 2001: return program;
                case 2002: return odc;
                case 2003: return global_choice;
                case 2004: return global_dec ;
                case 2005: return global_funcdec;
                case 2006: return var_dec;
                case 2007: return ident_var;
                case 2008: return dtype;
                case 2009: return next2var;
                case 2010: return next2var_tail;
                case 2011: return val;
                case 2012: return bulLit;
                case 2013: return array1D;
                case 2014: return elem1D_next;
                case 2015: return elem1D_list;
                case 2016: return elemlist1D_tail;
                case 2017: return array2D;
                case 2018: return elem2D_next;
                case 2019: return elem2D_list;
                case 2020: return size;
                case 2021: return const_dec;
                case 2022: return const_next;
                case 2023: return func_dec;
                case 2024: return dtype1;
                case 2025: return param;
                case 2026: return multi_param;
                case 2027: return stork_dec;
                case 2028: return stork_elem;
                case 2029: return multi_vardec;
                case 2030: return multistork_elem;
                case 2031: return obj_dec;
                case 2032: return mane;
                case 2033: return statement_mane;
                case 2034: return local_dec;
                case 2035: return statement;
                case 2036: return id_choice;
                case 2037: return string_concat;
                case 2038: return clrscr;
                case 2039: return statement1;
                case 2040: return statement_choice;
                case 2041: return statement_tail;
                case 2042: return input;
                case 2043: return scan_fig;
                case 2044: return multi_input;
                case 2045: return arr1D;
                case 2046: return arr2D;
                case 2047: return stork_access1;
                case 2048: return output;
                case 2049: return output_next;
                case 2050: return multi_output;
                case 2051: return scan_fig1;
                case 2052: return math_eqtail;
                case 2053: return math_eqchoice;
                case 2054: return math_tail;
                case 2055: return math_op;
                case 2056: return math_id;
                case 2057: return negate;
                case 2058: return matheq_next;
                case 2059: return conditional;
                case 2060: return cond_expr_choice;
                case 2061: return cond_expr;
                case 2062: return cond_tail;
                case 2063: return rel_expr1;
                case 2064: return relex_tail;
                case 2065: return arithmetic;
                case 2066: return arithmetic_tail;
                case 2067: return expression;
                case 2068: return expr_next;
                case 2069: return rel_op1;
                case 2070: return rel_op2;
                case 2071: return rel_fig;
                case 2072: return log_expr;
                case 2073: return not_fig;
                case 2074: return log_expr_next;
                case 2075: return log_op;
                case 2076: return cond_eelsif;
                case 2077: return cond_eels;
                case 2078: return swasp_case;
                case 2079: return swasp_case1;
                case 2080: return term_expr;
                case 2081: return defaults;
                case 2082: return iterative;
                case 2083: return loop_fig1;
                case 2084: return loop_fig2;
                case 2085: return increm_decrem;
                case 2086: return unary_op;
                case 2087: return function_call;
                case 2088: return args1;
                case 2089: return args2;
                case 2090: return args_tail;
                case 2091: return multi_args;
                case 2092: return sub_function;
                case 2093: return func_args;
                case 2094: return func_tail;
                case 2095: return one_array;
                case 2096: return two_array;
                case 2097: return multifunc_args;
                case 2098: return returns;
                case 2099: return result;
                case 2100: return result_tail;
            }
            return "";
        }
    }
}
